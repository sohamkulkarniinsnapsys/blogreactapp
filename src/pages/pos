// src/pages/CreatePostEnhanced.jsx
import React, { useState, useRef, useLayoutEffect, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { createPost } from "../services/appwrite";
import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd";
import { v4 as uuidv4 } from "uuid";

const slashCommands = {
  H1: "H1",
  H2: "H2",
  H3: "H3",
  paragraph: "Text",
  code: "Code",
  image: "Image", // Added image command
};

export default function CreatePostEnhanced() {
  const navigate = useNavigate();
  const titleRef = useRef(null);
  const blockRefs = useRef({});

  const [title, setTitle] = useState("");
  const [blocks, setBlocks] = useState([{ id: uuidv4(), type: "paragraph", content: "" }]);
  const [focusNextId, setFocusNextId] = useState(null);
  const [status, setStatus] = useState("draft");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [coverImage, setCoverImage] = useState(null);
  const [isHoveringCover, setIsHoveringCover] = useState(false);
  const [isHoveringTitle, setIsHoveringTitle] = useState(false);
  const [showToolbarId, setShowToolbarId] = useState(null);
  const [slashMenuId, setSlashMenuId] = useState(null);

  useEffect(() => titleRef.current?.focus(), []);

  useLayoutEffect(() => {
    if (focusNextId) {
      const el = blockRefs.current[focusNextId];
      if (el) {
        el.focus();
        placeCaretAtEnd(el);
      }
      setFocusNextId(null);
    }
  }, [focusNextId, blocks]);

  const placeCaretAtEnd = (el) => {
    const range = document.createRange();
    const sel = window.getSelection();
    range.selectNodeContents(el);
    range.collapse(false);
    sel.removeAllRanges();
    sel.addRange(range);
  };

  const handleCoverUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => setCoverImage(reader.result);
      reader.readAsDataURL(file);
    }
  };

  const removeCoverImage = () => setCoverImage(null);

  const addBlock = (index, type = "paragraph", content = "") => {
    const newBlock = { id: uuidv4(), type, content };
    const updated = [...blocks];
    updated.splice(index + 1, 0, newBlock);
    setBlocks(updated);
    setFocusNextId(newBlock.id);
  };

  const removeBlock = (index) => {
    if (blocks.length === 1) return;
    const updated = blocks.filter((_, i) => i !== index);
    const prev = updated[index - 1] || updated[0];
    setBlocks(updated);
    setFocusNextId(prev.id);
  };

  const handleBlockInput = (id, html) => {
    const text = html.replace(/<[^>]*>?/gm, "");
    if (text.startsWith("/")) {
      setSlashMenuId(id);
    } else if (slashMenuId === id) {
      setSlashMenuId(null);
    }
    setBlocks((prev) =>
      prev.map((b) => (b.id === id ? { ...b, content: html } : b))
    );
  };

  const handleKeyDown = (e, index) => {
    const block = blocks[index];
    if (e.key === "Enter") {
      e.preventDefault();
      if (e.shiftKey) {
        document.execCommand("insertLineBreak");
        return;
      }
      addBlock(index, "paragraph");
      return;
    }
    if (e.key === "Backspace" && block.content.replace(/<[^>]*>?/gm, "") === "") {
      e.preventDefault();
      removeBlock(index);
      return;
    }
    if (e.key === "ArrowUp" && index > 0) {
      e.preventDefault();
      const prev = blocks[index - 1];
      blockRefs.current[prev.id]?.focus();
      placeCaretAtEnd(blockRefs.current[prev.id]);
    } else if (e.key === "ArrowDown" && index < blocks.length - 1) {
      e.preventDefault();
      const next = blocks[index + 1];
      blockRefs.current[next.id]?.focus();
      placeCaretAtEnd(blockRefs.current[next.id]);
    }
  };

  const handleDragEnd = (result) => {
    if (!result.destination) return;
    const updated = Array.from(blocks);
    const [removed] = updated.splice(result.source.index, 1);
    updated.splice(result.destination.index, 0, removed);
    setBlocks(updated);
  };

  const applyFormat = (id, type) => {
    const el = blockRefs.current[id];
    if (!el) return;

    // Remove slash immediately
    let text = el.textContent.replace(/^\/\w*/, "").trim();
    el.innerHTML = text;

    if (type === "Image") {
      // Prompt for image URL or file upload
      const fileInput = document.createElement("input");
      fileInput.type = "file";
      fileInput.accept = "image/*";
      fileInput.onchange = (e) => {
        const file = e.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onloadend = () => {
          const imageBlock = { id: uuidv4(), type: "image", content: "", src: reader.result };
          const index = blocks.findIndex((b) => b.id === id);
          const updated = [...blocks];
          updated.splice(index + 1, 0, imageBlock);
          setBlocks(updated);
        };
        reader.readAsDataURL(file);
      };
      fileInput.click();
      setSlashMenuId(null);
      return;
    }

    setBlocks((prev) =>
      prev.map((b) => (b.id === id ? { ...b, type, content: text } : b))
    );

    setFocusNextId(id);
    setSlashMenuId(null);
  };

  const toggleInlineFormat = (id, tag) => {
    const el = blockRefs.current[id];
    if (!el) return;
    document.execCommand(tag, false, null);
    el.focus();
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!title.trim() || blocks.every((b) => b.content.replace(/<[^>]*>?/gm, "").trim() === "" && b.type !== "image")) {
      setError("Title and content required");
      return;
    }

    const contentHtml = blocks
      .map((b) => {
        switch (b.type) {
          case "paragraph":
            return `<p>${b.content}</p>`;
          case "H1":
            return `<h1>${b.content}</h1>`;
          case "H2":
            return `<h2>${b.content}</h2>`;
          case "H3":
            return `<h3>${b.content}</h3>`;
          case "image":
            return `<img src="${b.src}" alt="uploaded" />`;
          default:
            return b.content;
        }
      })
      .join("");

    setLoading(true);
    try {
      const newPost = await createPost(title, contentHtml, coverImage || null, "user-id-placeholder", status);
      navigate(`/post/${newPost.$id}`);
    } catch (err) {
      console.error(err);
      setError("Failed to create post");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto mt-12 p-6 bg-white dark:bg-gray-800 rounded-2xl shadow-lg">
      <h2 className="text-3xl font-bold mb-6">üìù Create Post (Enhanced)</h2>
      {error && <div className="mb-4 text-red-600">{error}</div>}

      {/* Cover Image */}
      <div
        className="relative mb-4"
        onMouseEnter={() => setIsHoveringCover(true)}
        onMouseLeave={() => setIsHoveringCover(false)}
      >
        {coverImage ? (
          <div className="relative">
            <img src={coverImage} alt="Cover" className="w-[40%] object-cover rounded-xl shadow-md block mx-auto" />
            {isHoveringCover && (
              <div className="absolute top-3 right-3 flex gap-2 z-10">
                <label className="cursor-pointer bg-black/40 text-white px-3 py-1 rounded-lg text-sm hover:bg-black transition">
                  Change Cover
                  <input type="file" accept="image/*" onChange={handleCoverUpload} className="hidden" />
                </label>
                <button
                  type="button"
                  onClick={removeCoverImage}
                  className="cursor-pointer bg-black/40 text-white px-3 py-1 rounded-lg text-sm hover:bg-red-600 transition"
                >
                  Remove
                </button>
              </div>
            )}
          </div>
        ) : (
          isHoveringCover && (
            <div className="absolute right-3 top-1/2 z-10">
              <label className="cursor-pointer bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-white px-4 py-1 rounded-md shadow text-sm hover:bg-gray-500 transition">
                üñºÔ∏è Add Image
                <input type="file" accept="image/*" onChange={handleCoverUpload} className="hidden" />
              </label>
            </div>
          )
        )}
      </div>

      <form onSubmit={handleSubmit}>
        {/* Title */}
        <div
          className="relative group mb-4"
          onMouseEnter={() => setIsHoveringTitle(true)}
          onMouseLeave={() => setIsHoveringTitle(false)}
        >
          <input
            ref={titleRef}
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter") {
                e.preventDefault();
                const firstBlock = blockRefs.current[blocks[0].id];
                if (firstBlock) {
                  firstBlock.focus();
                  placeCaretAtEnd(firstBlock);
                }
              }
            }}
            placeholder="Title..."
            className="w-full text-4xl font-bold p-3 bg-transparent focus:outline-none"
          />
          {/* Add Image Button on Title Hover */}
          {isHoveringTitle && (
            <div className="absolute right-3 top-1/2 -translate-y-1/2 z-10">
              <label className="cursor-pointer bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-white px-4 py-1 rounded-md shadow text-sm hover:bg-gray-500 transition">
                üñºÔ∏è Add Image
                <input
                  type="file"
                  accept="image/*"
                  onChange={(e) => {
                    const file = e.target.files[0];
                    if (!file) return;
                    const reader = new FileReader();
                    reader.onloadend = () => {
                      const imageBlock = { id: uuidv4(), type: "image", content: "", src: reader.result };
                      setBlocks((prev) => [imageBlock, ...prev]);
                    };
                    reader.readAsDataURL(file);
                  }}
                  className="hidden"
                />
              </label>
            </div>
          )}
        </div>

        {/* Blocks */}
        <DragDropContext onDragEnd={handleDragEnd}>
          <Droppable droppableId="blocks">
            {(provided) => (
              <div {...provided.droppableProps} ref={provided.innerRef} className="space-y-2">
                {blocks.map((b, index) => (
                  <Draggable key={b.id} draggableId={b.id} index={index}>
                    {(provided) => (
                      <div
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        ref={provided.innerRef}
                        className="relative p-1 focus:outline-none"
                        onMouseEnter={() => setShowToolbarId(b.id)}
                        onMouseLeave={() => setShowToolbarId(null)}
                      >
                        {b.type === "image" ? (
                          <img src={b.src} alt="uploaded" className="rounded-lg max-h-64 object-cover mx-auto" />
                        ) : (
                          <div className="relative w-full min-h-6">
                            <div
                              ref={(el) => (blockRefs.current[b.id] = el)}
                              contentEditable
                              suppressContentEditableWarning
                              onInput={(e) => handleBlockInput(b.id, e.currentTarget.innerHTML)}
                              onKeyDown={(e) => handleKeyDown(e, index)}
                              className={`w-full p-1 bg-transparent focus:outline-none ${
                                b.type === "H1"
                                  ? "text-3xl"
                                  : b.type === "H2"
                                  ? "text-2xl"
                                  : b.type === "H3"
                                  ? "text-xl"
                                  : ""
                              }`}
                            ></div>
                            {b.content.replace(/<[^>]*>?/gm, "") === "" && (
                              <span className="absolute top-2 left-2 text-gray-500 pointer-events-none select-none">
                                Type '/' for commands
                              </span>
                            )}
                          </div>
                        )}

                        {/* Slash menu */}
                        {slashMenuId === b.id && (
                          <div className="absolute top-full left-0 bg-white dark:bg-gray-800 border rounded shadow mt-1 z-20 p-2">
                            {Object.entries(slashCommands).map(([cmd, type]) => (
                              <div
                                key={cmd}
                                className="px-2 py-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded cursor-pointer"
                                onMouseDown={(e) => {
                                  e.preventDefault();
                                  applyFormat(b.id, type);
                                  const el = blockRefs.current[b.id];
                                  if (el) placeCaretAtEnd(el);
                                }}
                              >
                                {cmd} ‚Üí {type}
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </DragDropContext>

        {/* Footer */}
        <div className="flex justify-between mt-4">
          <select
            value={status}
            onChange={(e) => setStatus(e.target.value)}
            className="cursor-pointer p-2 border rounded-lg bg-gray-50 dark:bg-gray-700 dark:text-white hover:bg-gray-600"
          >
            <option value="draft">Draft</option>
            <option value="publish">Publish</option>
            <option value="archive">Archive</option>
          </select>
          <button
            type="submit"
            disabled={loading}
            className="cursor-pointer bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg transition"
          >
            {loading ? "Publishing..." : "Publish Post"}
          </button>
        </div>
      </form>
    </div>
  );
}
